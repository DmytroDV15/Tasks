// <auto-generated />
using System;
using Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace _.Migrations
{
    [DbContext(typeof(NorthwindDbContext))]
    [Migration("20250903143141_AddOrderIndexes")]
    partial class AddOrderIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("CustomerCustomerDemo", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerTypeID");

                    b.HasKey("CustomerId", "CustomerTypeId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("CustomerCustomerDemo", (string)null);
                });

            modelBuilder.Entity("Db.AlphabeticalListOfProduct", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discontinued")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("BLOB");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SupplierID");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("NUMERIC");

                    b.Property<int?>("UnitsInStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitsOnOrder")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("Alphabetical list of products", (string)null);
                });

            modelBuilder.Entity("Db.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("BLOB");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Db.CategorySalesFor1997", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("CategorySales")
                        .HasColumnType("BLOB");

                    b.ToTable((string)null);

                    b.ToView("Category Sales for 1997", (string)null);
                });

            modelBuilder.Entity("Db.CurrentProductList", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("Current Product List", (string)null);
                });

            modelBuilder.Entity("Db.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Db.CustomerAndSuppliersByCity", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("Customer and Suppliers by City", (string)null);
                });

            modelBuilder.Entity("Db.CustomerDemographic", b =>
                {
                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerTypeID");

                    b.Property<string>("CustomerDesc")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("Db.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("DATE");

                    b.Property<string>("HomePhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("BLOB");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ReportsTo");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Db.Invoice", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Discount")
                        .HasColumnType("REAL");

                    b.Property<double?>("ExtendedPrice")
                        .HasColumnType("REAL");

                    b.Property<double?>("Freight")
                        .HasColumnType("NUMERIC");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("Salesperson")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ShipperName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("NUMERIC");

                    b.ToTable((string)null);

                    b.ToView("Invoices", (string)null);
                });

            modelBuilder.Entity("Db.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShipVia")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShipVia");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Db.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<double>("UnitPrice")
                        .HasColumnType("NUMERIC");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order Details", (string)null);
                });

            modelBuilder.Entity("Db.OrderDetailsExtended", b =>
                {
                    b.Property<double?>("Discount")
                        .HasColumnType("REAL");

                    b.Property<double?>("ExtendedPrice")
                        .HasColumnType("REAL");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("NUMERIC");

                    b.ToTable((string)null);

                    b.ToView("Order Details Extended", (string)null);
                });

            modelBuilder.Entity("Db.OrderSubtotal", b =>
                {
                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<double?>("Subtotal")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("Order Subtotals", (string)null);
                });

            modelBuilder.Entity("Db.OrdersQry", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("Freight")
                        .HasColumnType("NUMERIC");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShipVia")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("DATETIME");

                    b.ToTable((string)null);

                    b.ToView("Orders Qry", (string)null);
                });

            modelBuilder.Entity("Db.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryID");

                    b.Property<bool>("Discontinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SupplierID");

                    b.Property<double?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC")
                        .HasDefaultValue(0.0);

                    b.Property<int?>("UnitsInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("UnitsOnOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Db.ProductDetailsV", b =>
                {
                    b.Property<string>("CategoryDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discontinued")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("BLOB");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SupplierID");

                    b.Property<string>("SupplierName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierRegion")
                        .HasColumnType("TEXT");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("NUMERIC");

                    b.Property<int?>("UnitsInStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitsOnOrder")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("ProductDetails_V", (string)null);
                });

            modelBuilder.Entity("Db.ProductSalesFor1997", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProductSales")
                        .HasColumnType("BLOB");

                    b.ToTable((string)null);

                    b.ToView("Product Sales for 1997", (string)null);
                });

            modelBuilder.Entity("Db.ProductsAboveAveragePrice", b =>
                {
                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("NUMERIC");

                    b.ToTable((string)null);

                    b.ToView("Products Above Average Price", (string)null);
                });

            modelBuilder.Entity("Db.ProductsByCategory", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discontinued")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitsInStock")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("Products by Category", (string)null);
                });

            modelBuilder.Entity("Db.QuarterlyOrder", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerID");

                    b.ToTable((string)null);

                    b.ToView("Quarterly Orders", (string)null);
                });

            modelBuilder.Entity("Db.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RegionID");

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Db.SalesByCategory", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProductSales")
                        .HasColumnType("BLOB");

                    b.ToTable((string)null);

                    b.ToView("Sales by Category", (string)null);
                });

            modelBuilder.Entity("Db.SalesTotalsByAmount", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<byte[]>("SaleAmount")
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("DATETIME");

                    b.ToTable((string)null);

                    b.ToView("Sales Totals by Amount", (string)null);
                });

            modelBuilder.Entity("Db.Shipper", b =>
                {
                    b.Property<int>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShipperID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("ShipperId");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Db.SummaryOfSalesByQuarter", b =>
                {
                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("DATETIME");

                    b.Property<double?>("Subtotal")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("Summary of Sales by Quarter", (string)null);
                });

            modelBuilder.Entity("Db.SummaryOfSalesByYear", b =>
                {
                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("DATETIME");

                    b.Property<double?>("Subtotal")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("Summary of Sales by Year", (string)null);
                });

            modelBuilder.Entity("Db.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Db.Territory", b =>
                {
                    b.Property<string>("TerritoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TerritoryID");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RegionID");

                    b.Property<string>("TerritoryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TerritoryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("EmployeeTerritory", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("TerritoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TerritoryID");

                    b.HasKey("EmployeeId", "TerritoryId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("EmployeeTerritories", (string)null);
                });

            modelBuilder.Entity("CustomerCustomerDemo", b =>
                {
                    b.HasOne("Db.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("Db.CustomerDemographic", null)
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Employee", b =>
                {
                    b.HasOne("Db.Employee", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("ReportsTo");

                    b.Navigation("ReportsToNavigation");
                });

            modelBuilder.Entity("Db.Order", b =>
                {
                    b.HasOne("Db.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Db.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Db.Shipper", "ShipViaNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ShipVia");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ShipViaNavigation");
                });

            modelBuilder.Entity("Db.OrderDetail", b =>
                {
                    b.HasOne("Db.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("Db.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Db.Product", b =>
                {
                    b.HasOne("Db.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Db.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Db.Territory", b =>
                {
                    b.HasOne("Db.Region", "Region")
                        .WithMany("Territories")
                        .HasForeignKey("RegionId")
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("EmployeeTerritory", b =>
                {
                    b.HasOne("Db.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("Db.Territory", null)
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .IsRequired();
                });

            modelBuilder.Entity("Db.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Db.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Db.Employee", b =>
                {
                    b.Navigation("InverseReportsToNavigation");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Db.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Db.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Db.Region", b =>
                {
                    b.Navigation("Territories");
                });

            modelBuilder.Entity("Db.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Db.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
